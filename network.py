from typing import List
from pyvis.network import Network
import os


def create_network(terms: dict[str, List[str]], category_name: str):
    """ 
    Creates a network graph centered on the main term as a HTML file
    
    Args:
        terms (dict[str, List[str]]): Dictionary of main terms and their connected terms
        category_name (str): Name of category the network is classified as

    Returns:
        None
    """
    for main_term in terms:
        # Set up base net
        net = Network()

        # Create new center node
        net.add_node(n_id=main_term, label=main_term, color="#ff5733")
        sub_terms = terms[main_term]

        # Create text HTML file for main term
        os.makedirs(f"texts/{category_name}/{main_term}", exist_ok=True)
        text_file_path = f"texts/{category_name}/{main_term}/{main_term}.html"
        generate_filler_file(text_file_path, main_term)

        # Join the terms together
        for sub_term in sub_terms:
            net.add_node(n_id=sub_term, label=sub_term, color="#33cfff")
            net.add_edge(main_term, sub_term)

            # Create the accompanying text HTML file
            text_file_path = f"texts/{category_name}/{main_term}/{sub_term}.html"
            generate_filler_file(text_file_path, sub_term)

        # Create the HTML file
        file_path = f"networks/{category_name}_{main_term}.html"
        net.write_html(file_path)


        # Insert custom JavaScript for node click events before the closing </body> tag
        custom_js = """
        <script type="text/javascript">
            network.on("click", function (params) {
                if (params.nodes.length > 0) {
                    const nodeId = String(params.nodes[0]).trim();
                    window.parent.postMessage(nodeId, "*");
                }
            });
        </script>
        """
        # Read the autogenerated HTML
        with open(file_path, "r") as html_file:
            html_content = html_file.read()

        # Inject the JavaScript before </body>
        updated_html = html_content.replace("</body>", f"{custom_js}\n</body>")

        # Write back the updated HTML
        with open(file_path, "w") as html_file:
            html_file.write(updated_html)


def generate_filler_file(file_path: str, header_text: str=""):
    """
    Generates an empty HTML file at the location described by the file path
    and fills the contents with barebones HTML and lorem ipsum text

    Args:
        file_path (str): Path of the file (includes the name of the file itself)
        header_text (str): Text to place in the h1 header (defaults to nothing if none given)

    Returns:
        None
    """

    lorem_text = f"""
    <html>
    <head><title></title></head>
    <body style="color: white;">
        <h1>{header_text}</h1>
        <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. 
        Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. 
        Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris 
        nisi ut aliquip ex ea commodo consequat.</p>
    </body>
    </html>
    """

    with open(file_path, "w") as text_file:
        text_file.write(lorem_text)


# For generating the graphs
if __name__ == "__main__":
    # Open the relationships folder
    for file_name in os.listdir("relationships/"):
        file_path = os.path.join("relationships/", file_name)

        with open(file_path, "r") as dataFile:
            # Skip the header line
            dataFile.readline()

            # Extract the main term and the sub terms
            terms = {}

            for line in dataFile:
                main_term, sub_term = line.strip().split(",")
                
                if main_term not in terms:
                    terms[main_term] = []
                
                terms[main_term].append(sub_term)

            # Generate the HTML file with the network
            file_start = file_name.split(".")[0]
            create_network(terms, file_start)